    08  Miscellaneous Functions; (2)
In C programming, miscellaneous functions cover a range of utility functions that perform various tasks not directly related to mathematical or string operations. These functions provide essential functionality for tasks such as memory management, input/output, and general program control. Here, we'll explore some of the miscellaneous functions commonly used in C programming.

### Memory Allocation and Deallocation:

#### `malloc`, `calloc`, `realloc`, and `free`

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Dynamic memory allocation using malloc
    int *arr1 = (int *)malloc(5 * sizeof(int));

    // Dynamic memory allocation using calloc
    int *arr2 = (int *)calloc(5, sizeof(int));

    // Resizing allocated memory using realloc
    int *arr3 = (int *)realloc(arr2, 10 * sizeof(int));

    // Freeing allocated memory
    free(arr1);
    free(arr3);

    return 0;
}
```

- `malloc`: Allocates a specified number of bytes of memory.
- `calloc`: Allocates memory for an array of elements, initializing them to zero.
- `realloc`: Resizes the memory block previously allocated with `malloc` or `calloc`.
- `free`: Deallocates the memory block previously allocated with `malloc`, `calloc`, or `realloc`.

### Input/Output Functions:

#### `printf` and `scanf`

```c
#include <stdio.h>

int main() {
    int num;
    
    // Output using printf
    printf("Enter a number: ");
    
    // Input using scanf
    scanf("%d", &num);
    
    // Output using printf
    printf("You entered: %d\n", num);

    return 0;
}
```

- `printf`: Prints formatted output to the console.
- `scanf`: Reads formatted input from the console.

### File Input/Output:

#### `fopen`, `fclose`, `fprintf`, `fscanf`, `fread`, `fwrite`

```c
#include <stdio.h>

int main() {
    FILE *file = fopen("example.txt", "w");
    
    if (file != NULL) {
        fprintf(file, "Hello, File!\n");
        fclose(file);
    }

    FILE *readFile = fopen("example.txt", "r");
    
    if (readFile != NULL) {
        char buffer[50];
        fscanf(readFile, "%s", buffer);
        printf("Content: %s\n", buffer);
        fclose(readFile);
    }

    return 0;
}
```

- `fopen`: Opens a file.
- `fclose`: Closes a file.
- `fprintf`: Writes formatted output to a file.
- `fscanf`: Reads formatted input from a file.
- `fread`: Reads a specified number of elements from a file.
- `fwrite`: Writes a specified number of elements to a file.

### Error Handling:

#### `perror` and `exit`

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *file = fopen("nonexistent.txt", "r");

    if (file == NULL) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Continue processing the file...

    fclose(file);

    return 0;
}
```

- `perror`: Prints a description for the last error that occurred.
- `exit`: Exits the program with a specified status code.

### System Commands:

#### `system`

```c
#include <stdlib.h>

int main() {
    // Execute a system command
    system("ls -l");

    return 0;
}
```

- `system`: Executes a shell command.

These miscellaneous functions are essential for performing various tasks beyond basic arithmetic and string manipulation in C programming. Proper understanding and usage of these functions contribute to writing robust and functional C programs.