FORMATTED INPUT SCANF

In C programming, `scanf` is a formatted input function used for reading data from the standard input (usually the keyboard) or other input streams. It allows you to read data in a specific format, making it suitable for various input scenarios. Here, we'll explore how to use `scanf` for formatted input.

### Basic `scanf` Usage:

```c
#include <stdio.h>

int main() {
    int age;

    // Reading an integer from the console
    printf("Enter your age: ");
    scanf("%d", &age);

    // Displaying the entered value
    printf("You entered: %d\n", age);

    return 0;
}
```

In this example, `%d` is the format specifier for reading an integer. It indicates that `scanf` should expect an integer input from the user. The `&` operator is used to get the address of the variable `age` for `scanf` to store the input.

### Reading Multiple Values:

```c
#include <stdio.h>

int main() {
    int age;
    double height;

    // Reading an integer and a double from the console
    printf("Enter your age and height (in meters): ");
    scanf("%d %lf", &age, &height);

    // Displaying the entered values
    printf("You entered: Age = %d, Height = %.2lf meters\n", age, height);

    return 0;
}
```

Here, `%d` is used for the integer, and `%lf` is used for reading a double (floating-point) value. Multiple format specifiers can be used to read multiple values in a single `scanf` call.

### Handling Strings with `scanf`:

```c
#include <stdio.h>

int main() {
    char name[50];

    // Reading a string (up to whitespace) from the console
    printf("Enter your name: ");
    scanf("%s", name);

    // Displaying the entered name
    printf("Hello, %s!\n", name);

    return 0;
}
```

The `%s` format specifier reads a string up to the first whitespace character. It's important to note that `%s` should be used with caution to avoid buffer overflow. A safer alternative is to use `%49s` to limit the number of characters read.

### Reading Characters:

```c
#include <stdio.h>

int main() {
    char gender;

    // Reading a single character from the console
    printf("Enter your gender (M/F): ");
    scanf(" %c", &gender);

    // Displaying the entered gender
    printf("You entered: Gender = %c\n", gender);

    return 0;
}
```

The `%c` format specifier is used to read a single character. Note the space before `%c` in `scanf` to skip any leading whitespaces (such as newline characters) left in the input buffer.

### Handling Error Cases:

```c
#include <stdio.h>

int main() {
    int result;

    // Attempting to read an integer, handling invalid input
    printf("Enter an integer: ");
    if (scanf("%d", &result) == 1) {
        printf("You entered: %d\n", result);
    } else {
        printf("Invalid input. Please enter an integer.\n");
    }

    return 0;
}
```

In this example, the return value of `scanf` is checked to determine whether the input was successfully read. If `scanf` returns 1, it means the input was valid.

### Use Cases:

1. **Reading Basic Data Types:**
   - `scanf` is commonly used for reading integers, floating-point numbers, characters, and strings.

2. **Formatted Input:**
   - `scanf` allows you to specify the format of the expected input, making it versatile for various scenarios.

3. **User Interaction:**
   - Used in scenarios where user input needs to be processed in a specific way.

### Best Practices:

1. **Input Validation:**
   - Check the return value of `scanf` to handle cases where the input format doesn't match expectations.

2. **Buffer Overflow Prevention:**
   - When reading strings, use a width specifier (`%49s` instead of `%s`) to prevent buffer overflows.

3. **Whitespace Handling:**
   - Be mindful of leading whitespaces when using `%c` or `%s` to avoid unexpected behavior.

4. **Prompt for Clarity:**
   - Provide clear prompts to users to indicate the expected input.

`scanf` is a powerful tool for formatted input in C, allowing for versatile handling of user input. However, caution should be exercised to ensure proper input validation and prevent potential issues like buffer overflows. Understanding the format specifiers and using them appropriately is key to effective use of `scanf`.