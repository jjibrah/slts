do-while Loop:

The `do-while` loop is another iteration control structure in programming, similar to the `while` loop. However, unlike the `while` loop, the `do-while` loop guarantees that the loop body is executed at least once before checking the loop condition. The basic syntax of a `do-while` loop consists of the `do` keyword followed by a block of code, and then the `while` keyword followed by the loop condition. The loop continues executing as long as the condition remains true.

Here's an example of a `do-while` loop in C:


#include <stdio.h>

int main() {
    // Example of a do-while loop in C

    // Initialize a counter
    int i = 1;

    // Loop while the counter is less than or equal to 5
    do {
        printf("Iteration %d\n", i);
        i++; // Increment the counter
    } while (i <= 5);

    return 0;
}

In this example, the `do-while` loop prints the message "Iteration x" for each value of `i` from 1 to 5. The loop body is executed at least once, and then the condition `i <= 5` is checked. If the condition is true, the loop continues to execute; otherwise, it exits.

The `do-while` loop is useful in situations where you want to ensure that a certain block of code runs at least once, regardless of the initial condition. However, like any loop structure, it's essential to carefully manage loop variables and conditions to prevent unintended infinite loops.