Pointers to Pointers

In C, pointers to pointers, also known as double pointers, allow for indirect access to memory locations. Understanding how to declare, initialize, and use pointers to pointers is essential for working with dynamic memory allocation and managing complex data structures.

### Declaration and Initialization:

```c
#include <stdio.h>

int main() {
    int num = 42;
    int *ptr1 = &num;   // Pointer to an integer
    int **ptr2 = &ptr1; // Pointer to a pointer to an integer

    // Accessing and modifying the value indirectly through double pointers
    printf("Value using double pointer: %d\n", **ptr2);

    // Modifying the value of 'num' indirectly
    **ptr2 = 99;
    printf("Updated value of num: %d\n", num);

    return 0;
}
```

In this example, `ptr1` is a pointer to an integer, and `ptr2` is a pointer to a pointer to an integer. The double pointer `ptr2` holds the address of `ptr1`, which, in turn, holds the address of the variable `num`.

### Dynamic Memory Allocation with Pointers to Pointers:

```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int rows = 3;
    int cols = 4;

    // Dynamic memory allocation for a 2D array using pointers to pointers
    int **matrix = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (int *)malloc(cols * sizeof(int));
    }

    // Initializing and accessing elements of the dynamic 2D array
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = i * cols + j;
            printf("%2d ", matrix[i][j]);
        }
        printf("\n");
    }

    // Freeing allocated memory
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);

    return 0;
}
```

Here, `matrix` is a dynamic 2D array created using pointers to pointers. Memory is allocated for each row and for the array of pointers to these rows. This structure allows for flexible memory management.

### Use Cases:

1. **Dynamic Data Structures:**
   - Pointers to pointers are commonly used in dynamic data structures like linked lists, trees, and graphs.

2. **Dynamic 2D Arrays:**
   - They are useful for creating and managing dynamic 2D arrays where the size is determined at runtime.

3. **Function Parameters:**
   - Pointers to pointers can be used to pass and modify pointers by reference in functions.

### Function Parameters with Pointers to Pointers:

```c
#include <stdio.h>
#include <stdlib.h>

// Function to create and initialize a dynamic 2D array
void createMatrix(int ***matrix, int rows, int cols) {
    *matrix = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; i++) {
        (*matrix)[i] = (int *)malloc(cols * sizeof(int));
        for (int j = 0; j < cols; j++) {
            (*matrix)[i][j] = i * cols + j;
        }
    }
}

// Function to free memory allocated for a dynamic 2D array
void freeMatrix(int ***matrix, int rows) {
    for (int i = 0; i < rows; i++) {
        free((*matrix)[i]);
    }
    free(*matrix);
    *matrix = NULL; // Optional: Set the pointer to NULL after freeing to avoid dangling pointers
}

int main() {
    int rows = 3;
    int cols = 4;
    int **matrix = NULL;

    // Create and initialize a dynamic 2D array using a function
    createMatrix(&matrix, rows, cols);

    // Access and print elements of the dynamic 2D array
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%2d ", matrix[i][j]);
        }
        printf("\n");
    }

    // Free memory allocated for the dynamic 2D array using a function
    freeMatrix(&matrix, rows);

    return 0;
}
```

This example demonstrates how to use pointers to pointers as function parameters to create, initialize, and free a dynamic 2D array.

Pointers to pointers are a powerful concept in C, providing flexibility in managing memory and handling complex data structures. They play a crucial role in scenarios where dynamic memory allocation and indirect referencing are required.
