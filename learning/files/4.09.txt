    09  Initialization;

Initialization in programming refers to the assignment of an initial value to a variable or the setup of a data structure before its use. Proper initialization is essential to ensure that variables and data structures are in a consistent and usable state. In C, variables can be initialized at the time of declaration, while data structures, such as arrays and structures, can be initialized using various techniques.

### Variable Initialization:

Variables can be initialized at the time of declaration, specifying an initial value.

Example:

```c
#include <stdio.h>

int main() {
    // Variable initialization
    int x = 10;
    double pi = 3.14159;
    char greeting[] = "Hello";

    printf("x: %d\n", x);
    printf("pi: %lf\n", pi);
    printf("greeting: %s\n", greeting);

    return 0;
}
```

In this example, `x`, `pi`, and `greeting` are initialized with values 10, 3.14159, and "Hello," respectively.

### Array Initialization:

Arrays can be initialized using curly braces `{}` to specify a list of values.

Example:

```c
#include <stdio.h>

int main() {
    // Array initialization
    int numbers[] = {1, 2, 3, 4, 5};
    char vowels[] = {'a', 'e', 'i', 'o', 'u'};

    for (int i = 0; i < 5; i++) {
        printf("%d ", numbers[i]);
    }
    printf("\n");

    for (int i = 0; i < 5; i++) {
        printf("%c ", vowels[i]);
    }
    printf("\n");

    return 0;
}
```

In this example, `numbers` and `vowels` arrays are initialized with specified values.

### Structure Initialization:

Structures can be initialized by providing values for each member.

Example:

```c
#include <stdio.h>

// Define a structure
struct Point {
    int x;
    int y;
};

int main() {
    // Structure initialization
    struct Point p1 = {3, 7};

    printf("Point coordinates: (%d, %d)\n", p1.x, p1.y);

    return 0;
}
```

Here, the structure `Point` is initialized with values 3 and 7 for its `x` and `y` members.

### Static Initialization:

Variables declared with the `static` keyword are initialized only once during the program's lifetime, and subsequent initializations are ignored.

Example:

```c
#include <stdio.h>

void exampleFunction() {
    static int count = 0;  // Initialized only once
    count++;
    printf("Count: %d\n", count);
}

int main() {
    exampleFunction();
    exampleFunction();
    exampleFunction();

    return 0;
}
```

In this example, the `count` variable is initialized only once, even though the `exampleFunction` is called multiple times.

Proper initialization is crucial for writing correct and reliable code. It establishes the initial state of variables and data structures, ensuring predictable behavior and preventing undefined or unintended results.